<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.openvidu.server.common.dao.ConferenceJobMapper">
  <resultMap id="BaseResultMap" type="io.openvidu.server.common.pojo.ConferenceJob">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="ruid" jdbcType="VARCHAR" property="ruid" />
    <result column="job_id" jdbcType="BIGINT" property="jobId" />
    <result column="type" jdbcType="VARCHAR" property="type" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Base_Column_List">
    id, ruid, job_id, type, create_time, update_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from sd_conference_job
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from sd_conference_job
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="io.openvidu.server.common.pojo.ConferenceJob">
    insert into sd_conference_job (id, ruid, job_id, 
      type, create_time, update_time
      )
    values (#{id,jdbcType=BIGINT}, #{ruid,jdbcType=VARCHAR}, #{jobId,jdbcType=BIGINT}, 
      #{type,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="io.openvidu.server.common.pojo.ConferenceJob">
    insert into sd_conference_job
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="ruid != null">
        ruid,
      </if>
      <if test="jobId != null">
        job_id,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="ruid != null">
        #{ruid,jdbcType=VARCHAR},
      </if>
      <if test="jobId != null">
        #{jobId,jdbcType=BIGINT},
      </if>
      <if test="type != null">
        #{type,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="io.openvidu.server.common.pojo.ConferenceJob">
    update sd_conference_job
    <set>
      <if test="ruid != null">
        ruid = #{ruid,jdbcType=VARCHAR},
      </if>
      <if test="jobId != null">
        job_id = #{jobId,jdbcType=BIGINT},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="io.openvidu.server.common.pojo.ConferenceJob">
    update sd_conference_job
    set ruid = #{ruid,jdbcType=VARCHAR},
      job_id = #{jobId,jdbcType=BIGINT},
      type = #{type,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <insert id="batchInsert">
    insert into sd_conference_job (ruid, job_id, type)
    values
    <foreach collection="list" item="item" index="index" separator=",">
      (#{item.ruid,jdbcType=VARCHAR}, #{item.jobId,jdbcType=BIGINT}, #{item.type,jdbcType=VARCHAR})
    </foreach>
  </insert>
  <select id="getJobIdsByRuids" resultType="java.lang.Long">
    select job_id from sd_conference_job where ruid IN
    <foreach collection="list" separator="," index="index" item="item" open="(" close=")">
      #{item}
    </foreach>
  </select>
  <delete id="batchDeleteByRuids">
    delete from sd_conference_job where ruid IN
    <foreach collection="list" separator="," index="index" item="item" open="(" close=")">
      #{item}
    </foreach>
  </delete>
  <delete id="deleteConferenceJobByJobId">
    delete from sd_conference_job where job_id = #{jobId,jdbcType=BIGINT}
  </delete>
</mapper>